===============================================================================
                    CURATIME - DOCUMENTATION TECHNIQUE COMPLÈTE
===============================================================================

1. PRÉSENTATION GÉNÉRALE
========================
CuraTime est une plateforme web de gestion de rendez-vous médicaux (React + Django).

Objectifs:
- Simplifier la réservation de consultations
- Offrir un portail patient, un espace médecin et une administration
- Gérer les disponibilités et le cycle complet des rendez-vous

2. ARCHITECTURE
===============
Frontend (React + TypeScript)
- React 18, React Router v6, Context API
- Axios, React Toastify
- Styles inline (CSS-in-JS minimal)

Backend (Django + DRF)
- Django 4.x, Django REST Framework
- Authentification JWT
- Base SQLite par défaut (remplaçable par PostgreSQL)

3. MODÈLES (PRINCIPAUX)
=======================
User
- email, first_name, last_name, user_role (client/doctor/admin), adresse, is_active...

Doctor
- user/email, phone, address, city, state, zip_code, specialization, availability (JSON), bio, consultation_fee

Appointment
- client (User), doctor (Doctor), date_time, status (pending/confirmé/terminé), created_at/updated_at

4. ENDPOINTS CLÉS
=================
Auth
- POST /api/client/login/
- POST /api/doctor/login/
- POST /api/admin/login/
- POST /api/register/

Médecins
- GET  /api/doctors/
- GET  /api/doctors/{id}/
- GET  /api/specialties/
- GET  /api/doctors/appointment/ (médecin connecté)
- GET  /api/doctors/me/      (profil + availability)
- PATCH /api/doctors/me/     (mise à jour profil et availability)

Rendez-vous
- POST   /api/appointments/
- GET    /api/appointments/list/
- PATCH  /api/appointments/update/{id}/
- DELETE /api/appointments/{id}/delete/

Support
- POST /api/support/contact/

Réinitialisation du mot de passe (par email)
- POST /api/client/forgot-password/ { email }
- POST /api/client/verify-code/ { email, code, new_password }

Frontend:
- Page “Mot de passe oublié” (ForgotPasswordPage) envoie l’email -> l’API renvoie un code par email.
- Page “Réinitialiser le mot de passe” (ResetPasswordPage) prend l’email, le code et le nouveau mot de passe, puis appelle /client/verify-code/.
- Les notifications informent l’utilisateur du succès/échec.

Calendrier / Disponibilités médecin
- Page “DoctorAvailabilityPage” pour gérer les dates et heures (UI simple, ajout/suppression, tri).
- Le backend accepte availability au format objet ou liste (voir section 5-6).

Email de support
- Définir l’email de destination dans backend/PPG/settings.py via SUPPORT_EMAIL.
- Exemple actuel: SUPPORT_EMAIL = 'bassemoueslati59@gmail.com'
- Adapter EMAIL_HOST_USER/EMAIL_HOST_PASSWORD pour l’envoi SMTP.

5. DISPONIBILITÉS — FORMAT ET LOGIQUE
=====================================
Champ: Doctor.availability (JSON) — stocke les créneaux par date.

Formats acceptés par PATCH /api/doctors/me/ (clé availability):
1) Objet (recommandé pour stockage):
{
  "2025-08-25": ["09:00", "10:30"],
  "2025-08-26": ["14:00"]
}

2) Liste (pratique pour l'UI):
[
  { "date": "2025-08-25", "times": ["09:00", "10:30"] },
  { "date": "2025-08-26", "times": ["14:00"] }
]

Règles de validation (backend):
- format date: YYYY-MM-DD
- times: strings "HH:MM"
- support "times" ou alias "slots"

6. UI DISPONIBILITÉS — GESTION SIMPLE
=====================================
Emplacement: Frontend > /doctor/availability (DoctorAvailabilityPage.tsx)

Fonctionnement:
- Ajout de créneaux via Date + Heure, liste par date, suppression de créneau/date.
- Plus d'éditeur JSON dans l'UI; le backend accepte toujours l'objet ou la liste.

Cycle de sauvegarde:
- Bouton "Enregistrer" envoie `availability` (objet dates -> liste d'heures) au backend.
- Le backend normalise et valide formats (YYYY-MM-DD / HH:MM).

7. INSTALLATION LOCALE
======================
Backend (c:\Users\Bassem\Downloads\PFE-LY\backend):
- pip install -r requirements.txt
- python manage.py migrate
- python manage.py runserver

Frontend (c:\Users\Bassem\Downloads\PFE-LY\frontend):
- npm install
- npm start

8. SÉCURITÉ ET RÔLES
====================
- JWT pour auth; permissions par rôle (IsClient, IsDoctor, IsAdmin)
- Endpoints protégés selon contexte (ex: /api/doctors/me/)

9. UI — PIED DE PAGE (MISE À JOUR)
==================================
- Suppression des sections "Liens rapides" et "Support".
- Icônes Facebook/Twitter/LinkedIn statiques, non cliquables.

10. BONNES PRATIQUES DISPONIBILITÉS
===================================
- Normaliser les heures en HH:MM (24h)
- Éviter les doublons côté UI (vérification déjà en place)
- Tri des dates et créneaux pour cohérence

11. EXEMPLES PRATIQUES
======================
PATCH /api/doctors/me/ (objet):
{
  "availability": {
    "2025-08-26": ["09:00", "10:30"],
    "2025-08-27": ["14:00"]
  }
}

PATCH /api/doctors/me/ (liste):
{
  "availability": [
    { "date": "2025-08-26", "times": ["09:00", "10:30"] },
    { "date": "2025-08-27", "times": ["14:00"] }
  ]
}

12. ÉTAT FINAL
==============
- Frontend React/TS complet (patients, médecins, admin)
- Auth JWT, profils, rendez‑vous
- Popup de gestion des disponibilités médecin + éditeur JSON
- API cohérente et validée
- Footer nettoyé selon demande

13. ÉVOLUTIONS CONSEILLÉES
==========================
- Calendrier visuel (hebdo/jour) pour les médecins (UI avancée)
- Rappels email/SMS
- Paiement en ligne
- Intégration calendriers externes (Google/Microsoft)

===============================================================================
                    CURATIME - FIN DE DOCUMENTATION
===============================================================================